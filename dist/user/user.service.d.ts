import { PrismaService } from '../prisma/prisma.service';
import { UserDto } from '../dto/user.dto';
export declare class UserService {
    readonly prisma: PrismaService;
    constructor(prisma: PrismaService);
    findUser(email: string): Promise<UserDto>;
    getUser(user_id: string): Promise<UserDto>;
    getUsers(): Promise<{
        user_id: number;
        name: string;
        email: string;
        document_cpf: string;
        date_of_birth: string;
        phone_number: string;
        gender: string;
        password: string;
        type: import(".prisma/client").$Enums.Type;
        created_at: Date;
        updated_at: Date;
        deleted_at: Date;
    }[]>;
    getUsersAdmin(): Promise<{
        user_id: number;
        name: string;
        email: string;
        document_cpf: string;
        date_of_birth: string;
        phone_number: string;
        gender: string;
        password: string;
        type: import(".prisma/client").$Enums.Type;
        created_at: Date;
        updated_at: Date;
        deleted_at: Date;
    }[]>;
    getUserSeller(): Promise<{
        user_id: number;
        name: string;
        email: string;
        document_cpf: string;
        date_of_birth: string;
        phone_number: string;
        gender: string;
        password: string;
        type: import(".prisma/client").$Enums.Type;
        created_at: Date;
        updated_at: Date;
        deleted_at: Date;
    }[]>;
    getUsersClient(): Promise<{
        user_id: number;
        name: string;
        email: string;
        document_cpf: string;
        date_of_birth: string;
        phone_number: string;
        gender: string;
        password: string;
        type: import(".prisma/client").$Enums.Type;
        created_at: Date;
        updated_at: Date;
        deleted_at: Date;
    }[]>;
    createUserAdmin(data: UserDto, user_id: number): Promise<{
        user_id: number;
        name: string;
        email: string;
        document_cpf: string;
        date_of_birth: string;
        phone_number: string;
        gender: string;
        password: string;
        type: import(".prisma/client").$Enums.Type;
        created_at: Date;
        updated_at: Date;
        deleted_at: Date;
    }>;
    createUserClient(data: UserDto, user_id: number): Promise<{
        user_id: number;
        name: string;
        email: string;
        document_cpf: string;
        date_of_birth: string;
        phone_number: string;
        gender: string;
        password: string;
        type: import(".prisma/client").$Enums.Type;
        created_at: Date;
        updated_at: Date;
        deleted_at: Date;
    }>;
    createUserSeller(data: UserDto, user_id: number): Promise<{
        user_id: number;
        name: string;
        email: string;
        document_cpf: string;
        date_of_birth: string;
        phone_number: string;
        gender: string;
        password: string;
        type: import(".prisma/client").$Enums.Type;
        created_at: Date;
        updated_at: Date;
        deleted_at: Date;
    }>;
    changeUser(data: UserDto, user_id: string): Promise<{
        user_id: number;
        name: string;
        email: string;
        document_cpf: string;
        date_of_birth: string;
        phone_number: string;
        gender: string;
        password: string;
        type: import(".prisma/client").$Enums.Type;
        created_at: Date;
        updated_at: Date;
        deleted_at: Date;
    }>;
    destroyUser(user_id: string): Promise<{
        user_id: number;
        name: string;
        email: string;
        document_cpf: string;
        date_of_birth: string;
        phone_number: string;
        gender: string;
        password: string;
        type: import(".prisma/client").$Enums.Type;
        created_at: Date;
        updated_at: Date;
        deleted_at: Date;
    }>;
}
